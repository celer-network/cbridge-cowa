{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "update contract owner, must be valid cosmwasm bech32 string",
      "type": "object",
      "required": [
        "update_owner"
      ],
      "properties": {
        "update_owner": {
          "type": "object",
          "required": [
            "newowner"
          ],
          "properties": {
            "newowner": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "update sig_checker contract addr as withdraw msg must come from it we can't use signers within vault because sgn only update signers in cbridge module and cbridge contract must be valid cosmwasm bech32 string",
      "type": "object",
      "required": [
        "update_sig_checker"
      ],
      "properties": {
        "update_sig_checker": {
          "type": "object",
          "required": [
            "newaddr"
          ],
          "properties": {
            "newaddr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "withdraw from user, vault contract will query sig_checker to verify sigs unlike solidity, no need to send current signers and their powers",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "pbmsg",
            "sigs"
          ],
          "properties": {
            "pbmsg": {
              "$ref": "#/definitions/Binary"
            },
            "sigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Binary"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "to be called by cw20 token contract for user deposit Cw20ReceiveMsg.msg is Deposit",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
